

[Experimenter 3] 10:31:25
Now we're going to cover

[Experimenter 3] 10:31:29
Some open-ended questions that are intended to enable us to construct what's called a fuzzy cognitive map.

[Experimenter 3] 10:31:35
Okay. Related to cyber attacks and cyber attackers, knowledge, beliefs, and decisions.

[Experimenter 3] 10:31:41
So there are no, as before, there are no predefined correct answers to any of these questions.

[Experimenter 3] 10:31:48
The process is iterative, open-ended, and follows a basic structure. So it's a semi-structured approach.

[Experimenter 3] 10:31:54
We also may use computer software, as you can see here, to

[Experimenter 3] 10:32:00
visualize and construct this map during this process.

[Participant 4] 10:32:05
Okay.

[Experimenter 3] 10:32:08
So I will step through some questions. This is

[Experimenter 3] 10:32:10
drawn from the steps that you've already outlined. 

[Participant 4] 10:32:13
Oh, cool.

[Experimenter 3] 10:32:15
in the goal-based task analysis.

[Experimenter 3] 10:32:20
And just to give you kind of a quick explanation of how this works, this is a directed network, so there are arrows in there. They're kind of hard to see, but they're there. You can see

[Experimenter 3] 10:32:31
More clearly on that one okay um

[Experimenter 3] 10:32:34
And each of these is a success condition, or it could be a challenge or a failure condition too.

[Experimenter 3] 10:32:41
And we're going to add more and more to it.

[Experimenter 3] 10:32:44
And the arrows indicate causal relationships.

[Experimenter 3] 10:32:48
So these are things that you believe cause the next node. And the arrows can be both positive or negative.

[Experimenter 3] 10:32:57
So successfully understanding how to interact with the code to gather useful output, for example, which was, I believe, step three.

[Experimenter 3] 10:33:06
I'm noting here that it may be

[Experimenter 3] 10:33:08
positively causes the ability or enables you to successfully crash the program.

[Experimenter 3] 10:33:13
Would you say that's correct? 

[Participant 4] 10:33:15
Yeah. 

[Experimenter 3] 10:33:16
Okay, cool. So that's basically how to read this. And then we're going to add a bunch more to it.

[Experimenter 3] 10:33:20
it may end up looking pretty messy. That's okay because the end result is actually a matrix file.

[Experimenter 3] 10:33:27
that contains all this graphical data.

[Experimenter 3] 10:33:33
So, okay, so what

[Experimenter 3] 10:33:37
We're going to step through here are

[Experimenter 3] 10:33:39
These are the key steps. I'd like to summarize that and then to go into some of the factors that

[Experimenter 3] 10:33:45
enable them. So first, this was step one. I'm going to mark one here.

[Experimenter 3] 10:33:50
Successfully understand what the challenge code or data is.

[Experimenter 3] 10:33:55
Is that right? So what are some of the factors that enable you to do that?

[Participant 4] 10:34:01
I think…

[Participant 4] 10:34:02
like technically or okay like you could run file on the given executable

[Participant 4] 10:34:10
Or…

[Participant 4] 10:34:12
Sometimes you don't even know if it's executable.

[Participant 4] 10:34:16
So…

[Participant 4] 10:34:18
I think running

[Participant 4] 10:34:20
Is this supposed to be technical or is this more like 

[Experimenter 3] 10:34:23
it can be both okay 

[Participant 4] 10:34:24
yeah I think running like hex dumping it, dumping the hexes, the hex values of

[Participant 4] 10:34:31
a suspicious it could be a binary dumping the hex values and trying to understand like

[Participant 4] 10:34:35
what you're looking at, because they usually can tell you, you know, the file signatures can tell you like what you're exactly looking at

[Participant 4] 10:34:45
I think also reading the description of the ctf

[Participant 4] 10:34:48
can usually also tell you what it is.

[Participant 4] 10:34:55
But this.

[Participant 4] 10:34:56
And I think utilizing

[Participant 4] 10:35:00
I think depending on the category, when you know what category it is, you know which tools you use. I guess it really just depends.

[Participant 4] 10:35:08
But using the context of 

[Participant 4] 10:35:11
the category which the CTF was

[Participant 4] 10:35:14
given in, use those tools to dissect what it is.

[Participant 4] 10:35:20
What we can also do is you can also, if it's like a cryptography challenge

[Participant 4] 10:35:25
look at the encoding of it.

[Participant 4] 10:35:28
And then from that encoding, it can also tell you

[Participant 4] 10:35:31
what it is. If it's base 64

[Participant 4] 10:35:33
If you're looking at base64 encoding, you can tell that there's binary data under that usually.

[Participant 4] 10:35:38
And that can also lead you to be

[Participant 4] 10:35:41
I can also lead you somewhere.

[Participant 4] 10:35:46
So I guess the decoding

[Participant 4] 10:35:49
some sort of on coding that you see.

[Participant 4] 10:35:51
can also give you more context of what you're looking at.

[Experimenter 3] 10:35:53
To make sure I have this right, for example, base 64 containing a binary

[Participant 4] 10:35:58
binary data. 

[Experimenter 3] 10:36:03
Containing binary data. Thank you.Okay.

[Participant 4] 10:36:06
Let's see what the code challenge does.

[Participant 4] 10:36:10
In description.

[Experimenter 3] 10:36:13
Do any of these…

[Experimenter 3] 10:36:16
enable others of them, for example, an informative CTF description, would that enable you to successfully or lead you to choose to do one of these things?

[Participant 4] 10:36:28
You said inform a CTF description, right? 

[Experimenter 3] 10:36:31
Yeah. 

[Participant 4] 10:36:32
Yeah, I think so. I think, yeah.

[Experimenter 3] 10:36:33
Okay. So would that an informative CTF description make you more likely to, for example.

[Experimenter 3] 10:36:41
run file or to dump hex values, or it really kind of depends on what the description is?
 
[Participant 4] 10:36:45
It depends on the description, but usually can give you a clue like, oh, okay, I'm going to go this path. 

[Experimenter 3] 10:36:52
Mm-hmm. Okay.

[Experimenter 3] 10:36:54
So these are all potentially different paths to determine what is this? Is that what you

[Participant 4] 10:36:59
Yes. 

[Experimenter 3] 10:37:00
Okay. And then the known CTF category in the informative description are

[Experimenter 3] 10:37:05
things that might lead to doing any of these.

[Participant 4] 10:37:07
Yes. 

[Experimenter 3] 10:37:10
Okay, cool. So then it's kind of

[Experimenter 3] 10:37:12
All to all here. Interesting.

[Experimenter 3] 10:37:15
And I'm not giving these a positive or negative

[Experimenter 3] 10:37:20
Because we're not specifying what category it is.

[Participant 4] 10:37:23
Okay. 

[Experimenter 3] 10:37:27
Or what the description says. So if it were, for example, the CTF category was cryptography, then you might select one of these over another. 

[Participant 4] 10:37:32
100%. 

[[Experimenter 3] 10:37:35
This is just that the category is informative. That makes sense.

[Participant 4] 10:37:39
In itself, yeah. 

[Experimenter 3] 10:37:44
Yep. Okay, cool. Alrighty, so…

[Experimenter 3] 10:37:46
It's kind of messy, but it's all in there. So then successfully understanding how it works is our next step here, step two. 

[Participant 4] 10:37:54
Okay.

[Experimenter 3] 10:37:56
And I believe, yeah, run the product if possible to understand how it works.

[Experimenter 3] 10:38:00
how do they make this? How does it work? How is this generated?

[Experimenter 3] 10:38:04
What are some of the factors that enable your success here?

[Participant 4] 10:38:07
So I think, I don't know if I think running it was definitely a way to understand how it works.

[Participant 4] 10:38:13
This one? 

[Participant 4] 10:38:17
Yeah. Oh, it's just running the binary? Like dot slash 

[Experimenter 3] 10:38:19
running file, yeah. 

[Participant 4] 10:38:21
Running the binary itself. How does it work? What am I interacting with? What does it display on the screen?

[Experimenter 3] 10:38:26
So that's basically the ability to run the binary

[Experimenter 3] 10:38:32
And get meaningful output? 

[Participant 4] 10:38:34
Yes.

[Experimenter 3] 10:38:36
Okay. 

[Participant 4] 10:38:38
And…understanding how it works. Sometimes you can't even understand how it works. It's ciphertext. But I think looking at the source code.

[Participant 4] 10:38:45
a quick glance at the source code isn't anything crazy

[Participant 4] 10:38:49
But just understanding like what language it was written in

[Experimenter 3] 10:38:52
Okay. 

[Participant 4] 10:38:55
What language is the source code? Is it C? Was it maiden c

[Participant 4] 10:38:57
Am I looking at assembly? What am I looking at?

[Participant 4] 10:39:01
how does this code

[Participant 4] 10:39:03
generate the output. How does assembly versus C generate this output?

[Participant 4] 10:39:10
Understanding how, yeah. I think

[Participant 4] 10:39:12
Mainly just running it and then seeing how it works.

[Participant 4] 10:39:15
Sometimes it's not executable, so you can't really do the step. This is just

[Participant 4] 10:39:19
Mainly if you're given something that

[Participant 4] 10:39:21
you can run. 

[Experimenter 3] 10:39:23
Yeah. So if it is not executable.

[Participant 4] 10:39:27
Then you would skip the stuff. Yep.

[Experimenter 3] 10:39:36
then that we would say that we would say

[Experimenter 3] 10:39:40
may impede your ability to understand how it works by running it anyway. 

[Participant 4] 10:39:45
Yeah.

[Experimenter 3] 10:39:47
And it certainly impedes your ability to run a binary. 

[Participant 4] 10:39:51
Yep.

[Experimenter 3] 10:39:54
if it's not executable, would that also potentially mean that you can't determine the language?

[Experimenter 3] 10:40:00
Or that there's not source code to look at.

[Participant 4] 10:40:02
No. Actually, if there was an executable

[Participant 4] 10:40:05
if there wasn't source code, then I think I wouldn't be able to find

[Participant 4] 10:40:10
The language, I think.

[Experimenter 3] 10:40:13
Okay.

[Experimenter 3] 10:40:15
We'll put like a 50%. 

[Participant 4] 10:40:18
Yeah.

[Experimenter 3] 10:40:20
Okay.

[Experimenter 3] 10:40:24
Alrighty.

[Experimenter 3] 10:40:28
So having gone through the basic factors here.

[Experimenter 3] 10:40:31
Let's step to step three here, which is how to interact with the code to gather some useful output. One of the things here would be to successfully crash it.

[Experimenter 3] 10:40:40
So what are the factors that enable you to basically understand how to interact with the code to gather that output?

[Participant 4] 10:40:48
I think previous step, if I'm able to like

[Participant 4] 10:40:50
execute it, then that's a great way of me understanding how I can interact with it. Because if I can execute it.

[Participant 4] 10:40:55
Perhaps I can interact with it.

[Experimenter 3] 10:41:01
Would that be the ability to run a binary basically?

[Participant 4] 10:41:03
Yeah.

[Participant 4] 10:41:04
Gotcha. 

[Participant 4] 10:41:09
Yeah, I think that's it. And understand and interact and gather. 

[Experimenter 3] 10:41:12
Are there facets of how you would interact with the code to gather that output?

[Experimenter 3] 10:41:16
Things in the code that would help.

[Participant 4] 10:41:19
I would look for like maybe

[Participant 4] 10:41:22
statements that use 

[Participant 4] 10:41:25
any libraries that

[Participant 4] 10:41:27
are designed to gather input from

[Participant 4] 10:41:30
Standard output, standard in.

[Participant 4] 10:41:33
Yeah, I would just basically look for functions that

[Participant 4] 10:41:37
gather information from the user. And that would be the only thing that I would think of would allow me to interact with the program unless

[Participant 4] 10:41:50
the program

[Participant 4] 10:41:50
Trying to think if the program was a server

[Participant 4] 10:41:53
and you're trying to reverse the server.

[Participant 4] 10:41:56
then I would, yeah, but that would still also encompass also

[Participant 4] 10:41:59
if it accepts data in any form, if it accepts like a get request.

[Participant 4] 10:42:04
If anything within the code.

[Participant 4] 10:42:06
is expecting data from our user, that's how I would

[Participant 4] 10:42:10
determine if I can successfully interact with it or not.

[Experimenter 3] 10:42:15
Mm-hmm.

[Experimenter 3] 10:42:18
So if the program is a server.

[Experimenter 3] 10:42:20
or contains a server, then that will positively enable you to check if it accepts get requests, right?

[Experimenter 3] 10:42:28
Would that potentially then mean that you're not going to be looking for libraries designed to gather input from standard in or standard out from the user? 

[Participant 4] 10:42:34
I think I still would. 

[Participant 4] 10:42:37
Still would, okay. If it's a server, are you still trying to crash the program?

[Participant 4] 10:42:41
Okay. Well, actually, no, no, no, no. Well, it depends.

[Participant 4] 10:42:45
Probably not. 

[Experimenter 3] 10:42:47
Probably not. Okay.

[Experimenter 3] 10:42:53
But you do still want to understand how it works and how to interact with it to gather useful output. 

[Participant 4] 10:42:58
Yes. 

[Experimenter 3] 10:43:02
Okay. What is useful output if it's a server? 

[Participant 4] 10:43:06
Useful output, if it's a server, if it responds back with a packet. I would use that information and be like, okay, what does this information mean? Because when it responds with information.

[Participant 4] 10:43:11
It's always very informative.

[Participant 4] 10:43:14
And sometimes it can respond with sensitive information that can help you leak parts of the flag.

[Participant 4] 10:43:19
It's just kind of very informative in a way where you understand more how it works and that can lead you to building an exploit.

[Experimenter 3] 10:43:26
Got it. So you're basically trying to understand the meaning of the response to your requests. 

[Participant 4] 10:43:30
Yes. 

[Experimenter 3] 10:43:32
Okay. Cool.

[Experimenter 3] 10:43:36
And that's necessarily positively enabled by checking to see if it accepts gets.

[Experimenter 3] 10:43:41
And that also enables you to understand how to interact with the code to gather useful output. 

[Participant 4] 10:43:45
Yep.

[Experimenter 3] 10:43:46
Cool. Okay. So that's kind of a server specific uh

[Experimenter 3] 10:43:51
sort of enabling causal pathway there. 

[Participant 4] 10:43:55
Yeah. 

[Experimenter 3] 10:43:56
Okay. Are there other pathways besides function statements designed to gather input?

[Experimenter 3] 10:44:01
you know, Gets

[Experimenter 3] 10:44:04
in a crypto challenge, is it different?

[Participant 4] 10:44:06
In a crypto challenge, oh, I mean, I guess if you're just given a source code that generates ciphertext

[Participant 4] 10:44:12
I would also just

[Participant 4] 10:44:13
I would just start like putting in random values and seeing how it encrypts those values. If I do AAA, how would it encrypt BBB? And then you start noticing patterns within the encryption algorithm.

[Experimenter 3] 10:44:25
This is basically the source code generates ciphertext is kind of, okay. 

[Participant 4] 10:44:32
And then you basically see what kind of ciphertext it outputs.

[Participant 4] 10:44:44
the kinds of outputs? 

[Experimenter 3] 10:44:46
Yeah. 

[Participant 4] 10:44:48
So I guess what is it outputting? Is it outputting

[Participant 4] 10:44:52
I guess like not what it outputs, but like how is this output structured

[Participant 4] 10:44:57
Why is the ciphertext formatted this way?

[Participant 4] 10:45:00
versus another way. How are they making

[Participant 4] 10:45:03
it ciphertext.

[Experimenter 3] 10:45:06
Mm-hmm.

[Experimenter 3] 10:45:08
Okay. Yeah. And in doing that, is that basically

[Experimenter 3] 10:45:12
straight causally enable you to understand how to interact with it to gather useful output? 

[Participant 4] 10:45:14
Yes. 

[Experimenter 3] 10:45:16
Is that mission accomplished for this step?

[Participant 4] 10:45:17
Yes. 

[Experimenter 3] 10:45:20
Okay, cool.

[Experimenter 3] 10:45:22
All right. This, C.

[Experimenter 3] 10:45:25
It's like this.

[Experimenter 3] 10:45:28
So it's still kind of legible.

[Experimenter 3] 10:45:30
Okay.

[Experimenter 3] 10:45:33
moving to successfully identifying vulnerabilities, what are the key factors here to enable your success?

[Participant 4] 10:45:40
I think using

[Participant 4] 10:45:42
debuggers really help you identifying some sort of vulnerability because it allows you

[Participant 4] 10:45:47
to step through the program and see how you're actually interacting.

[Participant 4] 10:45:52
with it.

[Participant 4] 10:45:55
Debuggers allow you to do that. I think reading the code

[Participant 4] 10:46:00
also was another step that helps you successfully identify vulnerabilities.

[Experimenter 3] 10:46:07
Just reading the code? 

[Participant 4] 10:46:08
Yeah, I think just reading the code itself

[Participant 4] 10:46:10
is really useful. 

[Experimenter 3] 10:46:12
This is source code. 

[Participant 4] 10:46:13
Yes. Reading the source code.

[Participant 4] 10:46:14
definitely

[Participant 4] 10:46:15
a way that can help you successfully identify vulnerability

[Participant 4] 10:46:22
You're saying like, what are the steps that take to get this? I think Googling. 

[Experimenter 3] 10:46:25
What are the factors that enable it? 

[Participant 4] 10:46:27
Okay, I think.

[Experimenter 3] 10:46:28
So it's not necessarily a process oriented steps, but what causes your success here? 

[Participant 4] 10:46:33
What causes my success? Okay.

[Participant 4] 10:46:38
And I would say like

[Participant 4] 10:46:40
identifying it. I think just reading through the code googling

[Participant 4] 10:46:45
Seeing if you've seen these vulnerabilities before, finding patterns

[Participant 4] 10:46:51
like, oh, from the previous steps

[Participant 4] 10:46:53
this said it was a binary exploitation challenge

[Participant 4] 10:46:57
And it hinted to something.

[Participant 4] 10:47:00
I'm going to…

[Participant 4] 10:47:02
draw the lines and see if I can find anything similar to this.

[Participant 4] 10:47:04
maybe I can successfully identify the vulnerability within this program. 

[Experimenter 3] 10:47:08
What sorts of patterns when you say identification of patterns?

[Participant 4] 10:47:12
Sure, like if it mentions the word heap in it

[Participant 4] 10:47:16
then you can be like, oh, it's using this

[Participant 4] 10:47:19
It's using malic. It's using the specific library function called malloc and it's

[Participant 4] 10:47:24
using the heap, I'm pretty sure it's going to be some sort of like heap challenge, heap exploitation challenge. And at that point, I'm going to Google

[Participant 4] 10:47:34
I'm going to look for like the code patterns that it's using in this ETF and compare it to other keep exploitation

[Participant 4] 10:47:40
CTFs and then kind of see if there's any similarities, which, oh, this one uses the same vulnerability here. I'm probably going to use it here also. 

[Experimenter 3] 10:47:48
Got it. So successfully identifying patterns

[Experimenter 3] 10:47:52
basically leads to better Google results.

[Participant 4] 10:47:54
Yeah, there you go. You know what to Google.

[Experimenter 3] 10:47:57
Got it. And is that

[Experimenter 3] 10:48:00
But do you successfully identify those patterns? Is that achieved by reading the source code?

[Participant 4] 10:48:06
Yes, I think so. Definitely reading the source code. 

[Experimenter 3] 10:48:09
Okay. So then that's actually kind of

[Experimenter 3] 10:48:12
End result. It's a result of reading the source code, enabling insight. 

[Participant 4] 10:48:16
Yes.

[Experimenter 3] 10:48:18
Okay, great.

[Experimenter 3] 10:48:20
Okay.

[Experimenter 3] 10:48:22
Are there other things, key factors here that enable success for identifying vulnerabilities?

[Participant 4] 10:48:30
source code interactions. I think

[Experimenter 3] 10:48:34
I know this is the big iterative step, right? 

[Participant 4] 10:48:38
Yeah, this is a huge iterative step. This is the one where you kind of have to leverage everything you found from one, two, and three.

[Experimenter 3] 10:48:43
And so asking on the topic of iteration, the Google results, does that then feed back into enabling Insight?

[Participant 4] 10:48:50
Yes. 

[Experimenter 3] 10:48:51
Into vulnerability. 

[Participant 4] 10:48:53
Definitely. 

[Experimenter 3] 10:48:55
Okay. So in a way, the Google results lead to better lead to reading source code more successfully 

[Participant 4] 10:48:59
yeah 

[Experimenter 3] 10:49:00
okay cool so this is kind of like a triangle here. 

[Participant 4] 10:49:05
Yep. 

[Experimenter 3] 10:49:06
Very cool. Yeah. And so were there any other factors that kind of come to mind here, this long iterative process?

[Participant 4] 10:49:13
I think also using available tools that you have. I can't think, but like if it's a, if you know it's a crypto challenge, you can use

[Participant 4] 10:49:22
frequency analysis tools that can identify the vulnerability for you. So certain challenges, you could just use a tool made by somebody else to

[Participant 4] 10:49:31
identify your vulnerability.

[Participant 4] 10:49:36
I don't know. I don't know if I should expand on that, but 

[Experimenter 3] 10:49:39
sure

[Participant 4] 10:49:40
there's also like freely available tools you can just run on the vulnerable CTF they give you and it should just instantly, I guess, identify the vulnerability

[Experimenter 3] 10:49:48
So on the source code or on

[Participant 4] 10:49:51
on the actual like CTF they give you. So sometimes it's not even source code. Sometimes it's just like

[Participant 4] 10:49:58
ciphertext or an image or

[Participant 4] 10:50:04
a key, a cryptographic key. You can run a tool on that and it'll instantly identify the vulnerability within whatever they give you.

[Experimenter 3] 10:50:12
Oh, interesting. 

[Participant 4] 10:50:14
Yeah.

[Experimenter 3] 10:50:15
Okay, so this is most commonly the case for crypto

[Participant 4] 10:50:20
Crypto, forensics.

[Participant 4] 10:50:22
Crypto and forensics challenges. You could just run a tool on it. I can also say that you could also use like

[Participant 4] 10:50:29
Sometimes you can use not sometimes you can use also like fuzzers on

[Participant 4] 10:50:35
pwn challenges that can help identify the vulnerability for you rather than you having to manually go through the code.

[Participant 4] 10:50:41
a fuzzer can just blast a ton of input on your binary and it could

[Participant 4] 10:50:45
find an exploit for you so

[Experimenter 3] 10:50:50
And basically surface the exploit for you? 

[Participant 4] 10:50:53
Yes, exactly. By crashing the program for you.

[Experimenter 3] 10:51:00
Sure. And this is if you have a binary. Okay. 

[Participant 4] 10:51:05
Yes.

[Experimenter 3] 10:51:08
Is there any intermediate step here um

[Experimenter 3] 10:51:12
This doesn't require reading the source code.

[Experimenter 3] 10:51:15
for inside this is just straight.

[Participant 4] 10:51:17
You would need to read the source code. So you would need to know where to kind of

[Participant 4] 10:51:22
have the fuzzing start. It needs to know where to

[Participant 4] 10:51:25
hook into. Yeah.

[Experimenter 3] 10:51:27
would it be the same thing for available tools to help identify the vulnerability like frequency analysis? 

[Participant 4] 10:51:31
You could just paste in the plain text and it'll do it for you. 

[Experimenter 3] 10:51:35
Got it. 

[Participant 4] 10:51:36
You don't have to read the code.

[Experimenter 3] 10:51:38
Got it. Okay.

[Experimenter 3] 10:51:41
And all of these things are enabled by understanding what the challenge is right and how it works.

[Participant 4] 10:51:46
Yes, definitely. 

[Experimenter 3] 10:51:51
Gotcha. Got it.

[Experimenter 3] 10:51:53
Okay. I think that that's all that's encoded here, but let me…

[Experimenter 3] 10:51:59
Just to be extra, extra sure. I don't want to make a huge mess of this causal graph, but I think…

[Experimenter 3] 10:52:09
Yeah, at least this.

[Experimenter 3] 10:52:16
Yeah.

[Experimenter 3] 10:52:18
Yeah, and also to

[Experimenter 3] 10:52:20
this right here, understanding that there is a server.

[Experimenter 3] 10:52:26
There may be some other bridges there but i think

[Experimenter 3] 10:52:29
get the gist. Okay, so…

[Experimenter 3] 10:52:33
onto the step of successfully building an exploit that leverages the vulnerability you found or vulnerabilities

[Experimenter 3] 10:52:42
what are the factors that enable that success, that enable you to build an exploit that

[Experimenter 3] 10:52:46
is effectively using the vulnerabilities to

[Participant 4] 10:52:49
Okay, I would think scripting is really important. Knowing how to craft

[Participant 4] 10:52:54
Being able to interact with the program itself, you would have to script

[Participant 4] 10:52:59
you have to create a program that allows you to

[Participant 4] 10:53:03
craft your exploit and use that exploit against something

[Participant 4] 10:53:06
So I think being able to know how to

[Participant 4] 10:53:09
program is very important.

[Experimenter 3] 10:53:13
Let's see. Are there particular languages?

[Participant 4] 10:53:16
Pyth languages. I think Python is my preferred python tool is like

[Participant 4] 10:53:22
pwntools is really great. It allows you to basically connect to a remote server and

[Participant 4] 10:53:29
send your exploit, which is really important. You need to have an outlet that allows you to send it.

[Experimenter 3] 10:53:34
Mm-hmm.

[Participant 4] 10:53:37
I think you also need to be able, I think also scripting is very important for like efficiency

[Participant 4] 10:53:41
when you're trying to reverse an encryption algorithm.

[Participant 4] 10:53:44
you would want to be able to script.

[Participant 4] 10:53:47
to be able to like reverse the code.

[Participant 4] 10:53:53
cryptographic libraries, I guess, are very important

[Participant 4] 10:53:56
like Pi CryptoDome

[Participant 4] 10:54:00
Those tools allow you to do really complex encryption algorithms with a simple library call.

[Experimenter 3] 10:54:06
Nice.

[Participant 4] 10:54:10
Successfully build

[Participant 4] 10:54:14
leveraging vulnerabilities. I think you can also use like

[Participant 4] 10:54:17
proof of concepts that are found on GitHub.

[Participant 4] 10:54:19
You can also use those depending on whatever your vulnerability is.

[Experimenter 3] 10:54:24
Would you incorporate those into the script? 

[Participant 4] 10:54:28
100%, yes. Or actually, sometimes you don't even need to craft your own script. You can use their script.

[Participant 4] 10:54:37
I think scripting is really is a way to successfully build an exploit

[Experimenter 3] 10:54:42
So that doesn't necessarily even involve crafting a script. It's just finding a pack on GitHub. Okay.

[Participant 4] 10:54:49
Um.

[Participant 4] 10:54:51
I think also like

[Participant 4] 10:54:54
I think like with step number four, if you're able just to have a tool

[Participant 4] 10:54:58
that instantly finds the vulnerability for you. You have your CTF right there. You don't even need to craft an exploit because

[Participant 4] 10:55:04
the tool did it for you.

[Experimenter 3] 10:55:07
Down here? 

[Participant 4] 10:55:09
Yeah. 

[Experimenter 3] 10:55:10
Okay. 

[Participant 4] 10:55:12
So if it was like a tool that like reverses something for you, like reverses a ciphertext for you instantly

[Participant 4] 10:55:15
You don't even need to go through step number five because it cracked it for you. 

[Experimenter 3] 10:55:19
So you've completed the CTF at that point? 

[Participant 4] 10:55:21
Yes. It depends, but that's like in really nice situations.

[Experimenter 3] 10:55:25
Can't be the case. 

[Participant 4] 10:55:32
Yes, but it can be the case. Successfully build, and so you're looking at

[Participant 4] 10:55:35
GitHub, your scripting your scripting

[Participant 4] 10:55:37
creating a script that reverses the encryption algorithm

[Participant 4] 10:55:46
I think that's what I can think of right now for those two categories that I play.

[Participant 4] 10:55:49
I know for like web

[Participant 4] 10:55:51
you would also use other tools.

[Participant 4] 10:55:54
like Burp Suite to like capture requests and then you can perform like a man in the middle, send your own malicious packet instead and then modify

[Experimenter 3] 10:56:02
Where would you use Burp Suite in this process? 

[Participant 4] 10:56:06
I think when you're crafting your exploit. 

[Experimenter 3] 10:56:08
Okay.

[Experimenter 3] 10:56:10
So you'd be crafting a man in the middle

[Participant 4] 10:56:13
Basically. And then that should give you your flag back because once you craft it, send it, they should respond back with your flag.

[Participant 4] 10:56:21
I don't really do.

[Participant 4] 10:56:25
Um.

[Participant 4] 10:56:29
Yeah, I think that would be the main idea. When I create things, I usually script a lot.

[Participant 4] 10:56:35
I don't think I really do anything else i don't.

[Participant 4] 10:56:38
Yeah, that'd be a big point. 

[Experimenter 3] 10:56:40
Okay. Make sure, I just want to make sure I comprehensively cover this one. If it's a web-based CTF

[Experimenter 3] 10:56:45
successfully craft a man in the middle using Burp Suite. And what does that accomplish? 

[Participant 4] 10:56:53
That accomplishes you to basically either um

[Participant 4] 10:56:54
You can send malicious data.

[Participant 4] 10:56:56
And then with that malicious data, it can either

[Participant 4] 10:57:00
give you

[Participant 4] 10:57:01
privileged um

[Participant 4] 10:57:03
permissions that allow you to read sensitive information from a server on their end. And that could

[Participant 4] 10:57:09
information could contain the flag.

[Participant 4] 10:57:12
performing a man, you can also pretend to be someone else by sending

[Participant 4] 10:57:17
by impersonating their cookie

[Participant 4] 10:57:19
And that allows you to read their sensitive information.

[Participant 4] 10:57:24
And those are things like are the top of my head. 

[Experimenter 3] 10:57:28
Okay. Yeah. And that…

[Experimenter 3] 10:57:33
Let's see, that is essentially in this case, that would be crafting a script that enables

[Experimenter 3] 10:57:39
that successfully interacts with the artifice, I guess. 

[Participant 4] 10:57:43
Yep. Okay. I think so. 

[Experimenter 3] 10:57:46
Okay. We'll say it enables this because this is just the more generic maybe description of this 

[Participant 4] 10:57:51
yeah

[Experimenter 3] 10:57:53
So, okay. Are there any other factors that might influence or enable completing the CTF, assuming you've built the exploit?

[Experimenter 3] 10:58:02
At this final step.

[Experimenter 3] 10:58:05
Or is it pretty much that's pretty much

[Participant 4] 10:58:07
I think that's pretty much it. 

[Experimenter 3] 10:58:10
Okay. Yeah. Cool. All right, so then hopping back in over here, are there any specific issues or details that either enable or inhibit

[Experimenter 3] 10:58:22
some of these

[Experimenter 3] 10:58:24
these enabling factors, like successfully running a file on the executable, dumping hex values, examining the encoding.

[Experimenter 3] 10:58:32
Obviously, these two are pretty clear.

[Experimenter 3] 10:58:35
Are there any other issues that might

[Experimenter 3] 10:58:38
details that might influence whether these are successful.

[Participant 4] 10:58:41
Those three or everything in that category?

[Experimenter 3] 10:58:44
We can hop through all of them. 

[Participant 4] 10:58:47
I think sometimes CTF description is completely useless and that just makes you, it's a kind of a black box view now. You know it's a crypto challenge or you know it's a reversing challenge, but

[Participant 4] 10:58:56
what am I supposed to do? So that could definitely inhibit it. The CTF description is lacking. It doesn't tell you what to do.

[Participant 4] 10:59:02
And you basically have to figure it out on your own.

[Participant 4] 10:59:07
I think running file, dumping the hex values, examining encoding is actually very useful

[Participant 4] 10:59:12
In a sense. And the only thing I could think of is just the CTF description is lacking

[Participant 4] 10:59:17
Even if you know the category.

[Participant 4] 10:59:20
It could also be something that's

[Participant 4] 10:59:24
not really it could be something that barely uses the category and you would have to do a different approach.

[Experimenter 3] 10:59:29
Okay. Do you sometimes try to infer the CTF category from the description or do you generally know it already?

[Participant 4] 10:59:36
I generally know it already. 

[Experimenter 3] 10:59:41
Okay. Yeah. Okay. And, uh.

[Experimenter 3] 10:59:43
Are there any, at this point, are there any potential surprises that might uh

[Experimenter 3] 10:59:49
emerge when examining the encoding, when dumping hex values, when running file.

[Participant 4] 10:59:55
Yeah, so like sometimes when you run file on it, it actually might not be the file

[Participant 4] 10:59:58
you're looking for because the CTF is clever

[Participant 4] 11:00:02
They edited like certain bytes to make you think it's a certain file, but it's actually not. When you look at the rest of the values.

[Participant 4] 11:00:09
So that's so

[Participant 4] 11:00:10
I guess a way would be like, it's not you even though it's

[Participant 4] 11:00:14
file says it's this, it's actually not that. The tools could be wrong. So you have to really examine. That's why you have to examine

[Participant 4] 11:00:21
what you're actually looking at.

[Experimenter 3] 11:00:23
So the results of running file are misleading in this case. 

[Participant 4] 11:00:29
Yes, it can be. Sometimes they give you a JPEG.

[Participant 4] 11:00:32
But it's actually not a JPEG. And that's for you to decide. That's for you to find out and solve it that way.

[Participant 4] 11:00:38
the file extensions could be wrong.

[Participant 4] 11:00:42
They could say, you know, it's one thing, but it's actually not like

[Participant 4] 11:00:46
They could give you like a packet for some reason

[Participant 4] 11:00:49
You're like, why am I getting a Wireshark packet?

[Participant 4] 11:00:53
When in reality, it's actually a binary exploitation challenge that you need to figure out.

[Participant 4] 11:00:57
Or sometimes they don't even tell you. Sometimes their CTFs were like.

[Participant 4] 11:01:00
Not CTFs, but there's sometimes there's companies make CTFs and they don't tell you what it is. They're just like, here's a vulnerable program, figure it out.

[Participant 4] 11:01:07
And that's for you to decide oh

[Participant 4] 11:01:10
Okay, what am I supposed to be doing here? You actually have to hunt the vulnerability yourself.

[Experimenter 3] 11:01:17
Okay. In that case, basically your results of running file or or

[Experimenter 3] 11:01:22
other things here basically are inconclusive. 

[Participant 4] 11:01:26
Yes, sometimes it can be okay

[Experimenter 3] 11:01:34
what might cause your results to be inconclusive?

[Participant 4] 11:01:38
I think like what I've seen before, like how, you know, you run file on it and then it tells you it's this one thing. But when you actually examine

[Participant 4] 11:01:46
the binary, the byte values

[Participant 4] 11:01:49
Hex values, it's not.

[Participant 4] 11:01:50
what it's saying it is. 

[Experimenter 3] 11:01:53
So the tool is being wrong or the results being misleading typically would would

[Experimenter 3] 11:01:57
result in that. Are there other things that might result in that too?

[Participant 4] 11:02:01
I can't think of it at the top of my head, but definitely. 

[Experimenter 3] 11:02:04
I'll label that as a surprise. 

[Participant 4] 11:02:07
Yes. 

[Experimenter 3] 11:02:08
Are there potentially distractions that also emerge here, things that end up wasting your time? 

[Participant 4] 11:02:14
Oh, definitely. sometimes i don't know sometimes

[Participant 4] 11:02:15
I think they can give you, they'll make something super obvious that it's like.

[Participant 4] 11:02:20
probably vulnerable, but it's actually not. Sometimes we'll give you fake flags. 

[Experimenter 3] 11:02:23
Is this at step one or is this later? 

[Participant 4] 11:02:26
This is later, I think. 

[Experimenter 3] 11:02:28
Later. Okay. Okay, cool. Are there any potential distractions just when you're trying to understand what it is?

[Experimenter 3] 11:02:32
Or is that kind of what this is? 

[Participant 4] 11:02:36
I think there definitely is. I just can't think of any right now. Let me…

[Participant 4] 11:02:41
I think sometimes what he can do is like

[Participant 4] 11:02:43
it could seem sometimes

[Participant 4] 11:02:47
I think it can mimic

[Participant 4] 11:02:49
looking like a certain type of challenge, it could mimic looking like a certain type of vulnerability when it actually isn't that. And they purposely do that to throw you off.

[Participant 4] 11:03:02
Yeah, that's how I'll explain it. 

[Experimenter 3] 11:03:04
Okay. Yeah. And when would you discover that?

[Participant 4] 11:03:08
You would discover that when you're actually looking at the source code, when you're actually examining in step number four, or even, I guess it's through the processes of interacting with it and looking at it, that's when you're like, wait a minute, this isn't what it's saying supposed to do. Or why did they add this to throw me off?

[Experimenter 3] 11:03:22
So maybe around step three here, understanding how to interact with the code to gather output?

[Experimenter 3] 11:03:28
Okay, got it. Got it. So three can enable this.

[Experimenter 3] 11:03:36
But this impedes your ability to identify vulnerabilities. Is that right?

[Participant 4] 11:03:38

[Experimenter 3] 11:03:40
Okay. So it kind of sits in there.

[Experimenter 3] 11:03:43
You succeed in number three, you figure out how to interact with the code, but what you find out is that it's…

[Experimenter 3] 11:03:49
you've been misled. 

[Participant 4] 11:03:51
I've been misled, so I have to start over. 

[Experimenter 3] 11:03:53
Got it. So then that leads you back to step one? 

[Participant 4] 11:03:55
Yes.

[Experimenter 3] 11:03:56
Okay.

[Experimenter 3] 11:04:00
So yeah, you gain understanding, but you're back there. 

[Participant 4] 11:04:03
Yes.

[Experimenter 3] 11:04:04
Okay. Got it. I'm going to put this up here. No, I'm not. I'm going to put this down here.

[Experimenter 3] 11:04:11
Okay. At step two here, so understanding how it works.

[Experimenter 3] 11:04:16
We have the ability to run a binary and get meaningful output. We have determining the language.

[Experimenter 3] 11:04:22
We have also, you know, if it's not executable.

[Experimenter 3] 11:04:26
You know, then you have to do something else.

[Experimenter 3] 11:04:30
Are there potential surprises at that step?

[Experimenter 3] 11:04:32
to understanding how it works. 

[Participant 4] 11:04:39
Yeah, I think one of the biggest surprises is like, oh, when you run file on it, you know it's an executable, but oh, you can't run it on your own system because it's made for a different operating system. So sometimes

[Participant 4] 11:04:49
You don't always have to run the program, but it's very useful when you can run it. So that would be

[Participant 4] 11:04:53
kind of a huge blocker because now you would have to learn how to virtualize a different environment for you to analyze

[Participant 4] 11:05:00
that executable which

[Participant 4] 11:05:03
could be hard if you don't know how to virtualize and also

[Participant 4] 11:05:07
Yeah, I guess I'll just say that.

[Participant 4] 11:05:12
Another thing that you can run into while trying to understand how it works

[Experimenter 3] 11:05:16
So this basically

[Experimenter 3] 11:05:18
renders it not executable on your system anyway? 

[Participant 4] 11:05:21
Yes. 

[Experimenter 3] 11:05:23
Is that right? Okay.

[Experimenter 3] 11:05:29
And…

[Experimenter 3] 11:05:30
In that case, you may then virtualize if you can. 

[Participant 4] 11:05:33
Yes.

[Experimenter 3] 11:05:35
And virtualizing then enables you to run a binary or do these things

[Participant 4] 11:05:38
yes 

[Experimenter 3] 11:05:40
does it enable determining does it enable both of these

[Participant 4] 11:05:43
Not really. 

[Experimenter 3] 11:05:44
It's really about running a binary. 

[Participant 4] 11:05:46
Yes. 

[Experimenter 3] 11:05:47
Okay. Got it. But to do that, you need to know how to virtualize. 

[Participant 4] 11:05:50
Yes, 100%. 

[Experimenter 3] 11:05:51
Okay, so causal factor here. 

[Participant 4] 11:05:52
Yes. 

[Experimenter 3] 11:05:53
How to virtualize.

[Participant 4] 11:05:54
100%, yes. Or emulate.

[Experimenter 3] 11:05:57
Got it.

[Experimenter 3] 11:06:08
Got it. Okay. Are there other issues or details that influence success here as well as

[Experimenter 3] 11:06:15
potential surprises 

[Participant 4] 11:06:19
um definitely uh you could be looking, so you're like, okay, I know what this is. And then when you actually examine the source code, it could be obfuscated.

[Participant 4] 11:06:25
And that's when you have to learn how to unobfuscate the code. Like sometimes a lot of JavaScript is obfuscated

[Participant 4] 11:06:34
And there are tools that help you

[Participant 4] 11:06:37
detangle that, but sometimes it doesn't. So that could also really hinder you understanding how it works

[Experimenter 3] 11:06:41
That's often the case with JavaScript.

[Participant 4] 11:06:45
Usually, actually.

[Experimenter 3] 11:06:50
Are there other factors that increase the probability that it is

[Experimenter 3] 11:06:54
hard to hard to sift through like that.

[Participant 4] 11:06:56
I think if

[Participant 4] 11:06:59
Okay. I think if like the symbols of a binary are stripped, then you don't know what you're looking at, period. You're just looking at a bunch of like random code that

[Participant 4] 11:07:08
has very vague meanings to them.

[Participant 4] 11:07:11
If it had symbols, you would understand that oh

[Participant 4] 11:07:14
Fund 101 is actually read from input

[Experimenter 3] 11:07:18
Mm-hmm.

[Experimenter 3] 11:07:20
Got it. So symbols of binary being stripped um

[Experimenter 3] 11:07:24
Okay. Does that mean that the source code's obfuscated or does it mean that it's just not really readable or something else? 

[Participant 4] 11:07:30
It's not really readable. 

[Experimenter 3] 11:07:33
Okay.

[Participant 4] 11:07:36
But also sometimes, I guess the symbols being stripped just makes it harder to

[Participant 4] 11:07:42
understand what's going on. But I think another way is also like when you decompile code, it could also be obfuscated. They could also name everything to really random

[Participant 4] 11:07:51
values. Yeah. And that could make it really hard got it to see

[Participant 4] 11:07:55
Whichever.

[Experimenter 3] 11:07:57
All right, so these both basically affect your ability to just read the code.

[Participant 4] 11:08:01
Yes. 

[Experimenter 3] 11:08:20
Okay. Reading and understanding or just reading in general? 

[Participant 4] 11:08:23
I think reading which leads to understanding.

[Experimenter 3] 11:08:26
Mm-hmm.

[Experimenter 3] 11:08:29
Okay, let's see.

[Experimenter 3] 11:08:31
That's our final thing here so

[Experimenter 3] 11:08:34
Let's, and that has a negative influence on this.

[Experimenter 3] 11:08:38
Okay.

[Experimenter 3] 11:08:44
All right.

[Experimenter 3] 11:08:47
So onto step three here, how to interact with the code to gather useful output.

[Experimenter 3] 11:08:52
So we have some of the key factors here.

[Experimenter 3] 11:08:55
input values to identify the structure and format of outputs.

[Experimenter 3] 11:09:00
Yeah, if it's a server, check and see if it accepts gets and what you get back. What's the meaning of the response. Functions or statements that use libraries that gather input like standard in.

[Experimenter 3] 11:09:12
So.

[Experimenter 3] 11:09:16
also discovering that it mimics a certain challenge or vulnerability.

[Experimenter 3] 11:09:20
Oh no, that's downstream. Sorry, this enables that.

[Experimenter 3] 11:09:25
So are there key issues or details that would enable you to, for example, determine the program as a server.

[Experimenter 3] 11:09:33
to, you know.

[Experimenter 3] 11:09:34
input random values to identify the structure and format of the outputs are there

[Experimenter 3] 11:09:39
other things that enable these

[Experimenter 3] 11:09:41
these activities 

[Participant 4} 11:09:42
that enable them

[Experimenter 3] 11:09:44
Like, yeah, like what enables you to find functions or statements that use libraries designed to gather input?

[Participant 4] 11:09:51
I think using tools like decompilers allow you to examine source code itself and find these

[Participant 4] 11:09:57
Standard or these libraries.

[Participant 4] 11:10:00
decompilers looking at the source code itself is another one also.

[Participant 4] 11:10:08
Okay. I think so, yeah.  

[Experimenter 3] 11:10:10
Got it. So yeah, successful use of decompilers is a key thing here, huh?

[Participant 4] 11:10:13
I think so. 

[Experimenter 3] 11:10:15
Okay. And that enables you to find functions or statements.

[Experimenter 3] 11:10:21
Is that also relevant if there's a server, if you're dealing with source code that generates ciphertext?

[Participant 4] 11:10:27
With source code that generates ciphertext to find yeah

[Participant 4] 11:10:30
I think you wouldn't use a decompiler then usually for ciphertech. It depends. If they give you

[Participant 4] 11:10:36
just like a Python script, you would just have to analyze yourself.

[Participant 4] 11:10:41
And see where it gathers like standard input or if they're using mathematical operations that are definitely reversible, that would be another way of

[Participant 4] 11:10:52
being able to

[Participant 4] 11:10:54
reverse it, I guess, and see if you can create your own ciphertext. 

[Experimenter 3] 11:11:00
So identifying reversible operations in the source code. 

[Participant 4] 11:11:04
100%, yeah.

[Experimenter 3] 11:11:09
Okay, so…

[Experimenter 3] 11:11:11
Before we fill that one out, I'm going to mark it down here so we get back to it. But successfully using decompilers to examine the source code.

[Experimenter 3] 11:11:18
Maybe we'll simplify this to successfully examine the source code. 

[Participant 4] 11:11:22
Yes.

[Experimenter 3] 11:11:24
Which then enables you to find functions, but also enables you to identify reversible operations in that case.

[Participant 4] 11:11:31
Okay.

[Experimenter 3] 11:11:33
This one here.

[Experimenter 3] 11:11:37
And if you do identify a reversible operations, what does that enable?

[Participant 4] 11:11:41
That's great. I think it's a really good sign that you're getting somewhere and that

[Participant 4] 11:11:45
Usually if you find something that's reversible and it correlates with like the output that you're given, usually you have identified your vulnerability.

[Experimenter 3] 11:11:54
Okay. Yeah. So that enables you to understand how to interact, gather useful output, basically. 

[Participant 4] 11:11:58
Yep.

[Experimenter 3] 11:12:01
Okay.

[Experimenter 3] 11:12:03
So understanding how to interact with it to gather output, we have that leading directly to successfully crashing it.

[Experimenter 3] 11:12:09
Is there an intermediate step there? Are there other things you need to be able to crash it besides

[Experimenter 3] 11:12:15
gathering useful output.

[Participant 4] 11:12:19
Hmm.

[Participant 4] 11:12:22
From my experience with CTFs, it usually crashes

[Participant 4] 11:12:27
You can only crash a program when it like receives something in the CTF. So you would have to look for like if this program accepts input

[Participant 4] 11:12:36
then you'd be able to crash it somehow.

[Experimenter 3] 11:12:38
So you need to determine an input that's able to crash.

[Participant 4] 11:12:42
you need to determine if the program accepts input in some way.

[Participant 4] 11:12:46
And that's when you know, oh, I can probably put something in there to crash it. 

[Experimenter 3] 11:12:50
Okay. Yeah. I think we have that right with fine functions that

[Experimenter 3] 11:12:54
use libraries designed to gather input.

[Experimenter 3] 11:12:57
So then we understand how to interact with it to get useful output.

[Experimenter 3] 11:13:02
do we need to then, is there a crafting or design step for

[Experimenter 3] 11:13:06
finding the precise thing that enables the that causes the crash, or is that fairly straightforward from

[Participant 4] 11:13:12
It would depend, I guess you would have to really examine the source code and see if it's using any vulnerable functions, using any functions that don't do any balance checking.

[Participant 4] 11:13:22
If it's

[Participant 4] 11:13:24
reading, if it's calculating buffer sizes wrong

[Participant 4] 11:13:29
if it's

[Participant 4] 11:13:31
Yeah, I think that's all I'll say for now.

[Experimenter 3] 11:13:34
And those vulnerable functions

[Experimenter 3] 11:13:36
do they need to relate to the user input?

[Participant 4] 11:13:42
They don't have to always. Actually, vulnerable functions, yes.

[Participant 4] 11:13:46
But sometimes there can also be cases where they're just misusing certain functions, which can also lead to crashing of the program if

[Participant 4] 11:13:54
the CTF player crafts their input.

[Participant 4] 11:13:58
like cleverly. 

[Experimenter 3] 11:14:02
Mm-hmm. So is this a separate thing from understanding how to interact with the code to get useful output? Or is it like.

[Experimenter 3] 11:14:09
is this part of just examining the source code? 

[Participant 4] 11:14:11
That's part of examining the source code.

[Experimenter 3] 11:14:13
Okay, okay. So we'll say examining the source code enables it

[Experimenter 3] 11:14:18
Does this enable the high level step of understanding how to interact with the code to get useful output? 

[Participant 4] 11:14:21
I think so. 

[Experimenter 3] 11:14:23
So determining vulnerability is part of

[Experimenter 3] 11:14:26
part of, you know, I'm going to get useful output. 

[Participant 4] 11:14:28
Yes. 

[Participant 4] 11:14:30
Okay, cool. And that also directly enables crashing the program?

[Participant 4] 11:14:33
Sometimes. Yes. 

[Experimenter 3] 11:14:34
Sometimes? 

[Participant 4] 11:14:35
Yeah. 

[Experimenter 3] 11:14:36
Okay. Not all the time.

[Participant 4] 11:14:37
Yeah. 

[Experimenter 3] 11:14:38
Okay, cool.

[Experimenter 3] 11:14:40
0.5.

[Experimenter 3] 11:14:42
Okay. Are there things that impede determination of a vulnerable or misused function?

[Participant 4] 11:14:51
I think…

[Participant 4] 11:14:52
Oh, okay. I think like protections, sometimes programs have implemented like stack protections um

[Participant 4] 11:14:59
Stack Canary.

[Participant 4] 11:15:01
They make the stack non-executable. They randomize addresses.

[Participant 4] 11:15:06
that's another way where it can mitigate

[Participant 4] 11:15:10
misuse of

[Participant 4] 11:15:11
like vulnerable coding, I guess. So your next step would have to be how to

[Participant 4] 11:15:16
how to bypass these security measures.

[Experimenter 3] 11:15:20
And you'd find that, sorry to interrupt, you'd find that from examining the source code, is that right?

[Participant 4] 11:15:26
You would…

[Participant 4] 11:15:27
No, you would actually determine that by running file or like check sec on it. That would be I guess I'd be an inter

[Experimenter 3] 11:15:32
So would that be during the process of interacting with it to try to gather output that you would uncover that

[Participant 4] 11:15:38
um yeah sometimes okay sometimes you don't realize the specific protections in place or you forget.

[Experimenter 3] 11:15:46
I'm kind of curious whether you think it'd be a result of this or whether it would be a separate thing where you

[Experimenter 3] 11:15:52
be running check second file? 

[Participant 4] 11:15:54
I think. To be honest, it's kind of part of the first step. 

[Experimenter 3] 11:15:57
Oh, okay. 

[Participant 4] 11:15:59
But then sometimes I think I've had cases where I forgot like, oh yeah, this like security measures in place. And that's only when I'm actually testing my exploit. And I'm like, oh, that's why it's not working. Okay. 

[Experimenter 3] 11:16:11
So this is all the way back here where you're trying to understand what the code and data is. 

[Participant 4] 11:16:14
Yes. 

[Experimenter 3] 11:16:15
Okay, so if you successfully understand what it is, well, basically it's a result of successfully running file. Is that…

[Participant 4] 11:16:20
not file. It'd be using other tools

[Participant 4] 11:16:22
That would allow you to

[Participant 4] 11:16:25
That would check the vulnerability three or the protections it has in place. 

[Experimenter 3] 11:16:31
Got it. Okay. What are those tools that you use? 

[Participant 4] 11:16:36
CheckSec. I've used O-Tool on Mac devices.

[Participant 4] 11:16:40
And that's like

[Participant 4] 11:16:42
Those are the two tools I usually use.

[Experimenter 3] 11:16:44
Okay, good enough, yeah.

[Experimenter 3] 11:16:54
And that is part of understanding what this is. 

[Participant 4] 11:16:57
Yes. 

[Experimenter 3] 11:16:59
Okay. Cool.

[Experimenter 3] 11:17:05
And then…

[Experimenter 3] 11:17:07
Actually, we don't need a new node for this. I'll just put this down here for the next one. But identifying that

[Experimenter 3] 11:17:15
affects your determination of vulnerable or misused functions. Is that right?

[Participant 4] 11:17:20
Yes. Okay.

[Experimenter 3] 11:17:22
It makes it harder? 

[Participant 4] 11:17:24
It makes it harder to exploit those vulnerabilities.

[Experimenter 3] 11:17:27
Okay, so it…

[Experimenter 3] 11:17:29
you still find the vulnerabilities, but you can't

[Experimenter 3] 11:17:32
successfully crashed the program with them? 

[Participant 4] 11:17:33
Yes. 

[Experimenter 3] 11:17:34
Okay. I see.

[Experimenter 3] 11:17:36
All right, so it more is that. It's not it doesn't

[Experimenter 3] 11:17:41
influence determining the vulnerable or misused functions it's just that

[Experimenter 3] 11:17:45
Even if you identify them, it's harder to crash the program. 

[Participant 4] 11:17:48
100%. 

[Experimenter 3] 11:17:50
Okay, cool. All right.

[Experimenter 3] 11:17:54
So, uh.

[Experimenter 3] 11:17:56
This is successfully identify vulnerabilities.

[Experimenter 3] 11:18:00
Is that? Hmm.

[Experimenter 3] 11:18:04
Is there a difference here between

[Experimenter 3] 11:18:06
understanding how to interact with the code to gather useful output and this

[Experimenter 3] 11:18:10
So that leads to successfully identifying vulnerabilities here. We also have a sub-step

[Experimenter 3] 11:18:16
Down here, really a sub, sub, sub step i think

[Experimenter 3] 11:18:20
Which is based on

[Experimenter 3] 11:18:23
examining the source code, which is determine a vulnerable or misused function.

[Experimenter 3] 11:18:28
Is that separate from identify vulnerabilities?

[Participant 4] 11:18:32
Mm-hmm.

[Participant 4] 11:18:34
I guess, yeah, I guess it just depends. The way I'm thinking it is like, okay, I have identified

[Participant 4] 11:18:41
You know what? No, I think that is examining. That is part of step number four. 

[Experimenter 3] 11:18:44
Okay. 

[Participant 4] 11:18:45
But you can only find that through examining the source code.

[Experimenter 3] 11:18:48
Got it. Yeah.

[Experimenter 3] 11:18:50
So examining the source code enables

[Experimenter 3] 11:18:53
Step four. 

[Participant 4] 11:18:54
Yes. 

[Experimenter 3] 11:19:00
Directly. Okay. Got it. Okay. These vulnerabilities, is that different? That's different from a vulnerable or misused function, correct? Or is that the same? 

[Participant 4] 11:19:07
I would think it's the same thing. 

[Experimenter 3] 11:19:10
Okay.

[Participant 4] 11:19:11
A misused function would be a vulnerability. 

[Experimenter 3] 11:19:12
Okay. 

[Participant 4] 11:19:13
Yes.

[Experimenter 3] 11:19:14
Got it. All right.

[Experimenter 3] 11:19:17
So then I'm going to move this up here.

[Experimenter 3] 11:19:21
And say that this is

[Experimenter 3] 11:19:23
Basically.

[Experimenter 3] 11:19:28
kind of a bridge

[Experimenter 3] 11:19:29
three and four here.

[Experimenter 3] 11:19:38
Okay.

[Experimenter 3] 11:19:41
Okay, so we have these factors related to successfully identifying vulnerabilities like

[Experimenter 3] 11:19:47
Informative Google results or identification of patterns.

[Experimenter 3] 11:19:52
At this step, are there…

[Experimenter 3] 11:19:55
any underlying issues or details that enable successful identification of patterns or

[Experimenter 3] 11:20:02
reading the source code enabling insight into vulnerability.

[Participant 4] 11:20:09
Are there any things that help you enable that um i think

[Participant 4] 11:20:13
Previous experience also helps. I think playing

[Participant 4] 11:20:15
I don't know if that really counts, but like playing other CTFs and you start to find a lot of patterns 

[Experimenter 3] 11:20:18
yep

[Participant 4] 11:20:20
And then you're just like, oh, this is just another thing I've seen before. 

[Experimenter 3] 11:20:24
I'm going to create a bridge right here. These two nodes I think will end up merging together because this is source code examination and this is reading the source code.

[Experimenter 3] 11:20:32
Okay. So past experience? 

[Participant 4] 11:20:35
I think so, definitely. 

[Experimenter 3] 11:20:38
Okay. 

[Participant 4] 11:20:42
Things you've seen before really play. And to also knowing like what to look for, what to Google, what to see for. Yeah.

[Experimenter 3] 11:20:56
Okay.

[Experimenter 3] 11:20:58
Are there occasionally surprises at this step?

[Experimenter 3] 11:21:03
Where either your past experience, you rely on that to inform what to look for and you're surprised and wrong.

[Participant 4] 11:21:09
Yes, definitely. There's times.

[Participant 4] 11:21:13
We think it works, but because they have a specific

[Participant 4] 11:21:16
security measure in place, you can't use that exploit and you have to look for another

[Participant 4] 11:21:22
way to go about it, which involves you going back and just being like, okay, I think I looked at this in the wrong angle.

[Participant 4] 11:21:29
What's another vulnerability in this program?

[Experimenter 3] 11:21:32
Okay. Would that be…

[Experimenter 3] 11:21:37
at the identification of patterns, like mentions of heap? 

[Participant 4] 11:21:41
Yes. 

[Experimenter 3] 11:21:44
Okay. So, uh.

[Experimenter 3] 11:21:47
Identifying protections affects your ability to identify those patterns.

[Participant 4] 11:21:51
No, I think 

[Experimenter 3] 11:21:55
it just affects whether they're useful. Is that right? 

[Participant 4] 11:21:57
Yeah. 

[Experimenter 3] 11:21:58
Okay. Okay. Got it. All right. So then…

[Experimenter 3] 11:22:02
This basically affects the usefulness of vulnerabilities that you've found. 

[Participant 4] 11:22:08
Yes. 

[Experimenter 3] 11:22:11
Okay, cool. So it's not about identifying. It doesn't affect your ability to find a vulnerability. 

[Participant 4] 11:22:15
Yes. 

[Experimenter 3] 11:22:16
It affects your ability to build the exploit. 

[Participant 4] 11:22:19
Yes, to leverage it. 

[Experimenter 3] 11:22:20
Got it. Okay, cool.

[Experimenter 3] 11:22:21
So then it's actually impeding step five.

[Experimenter 3] 11:22:24
successfully build the exploit. 

[Participant 4] 11:22:26
Yes. 

[Experimenter 3] 11:22:28
Cool. Are there any surprises?

[Experimenter 3] 11:22:31
when it comes to trying to identify patterns.

[Experimenter 3] 11:22:36
The example you gave earlier was like the mention of heap, for example. 

[Participant 4] 11:22:40
I think the protections usually are the ones that

[Participant 4] 11:22:44
I think…

[Participant 4] 11:22:46
I don't know how to explain it. I think like the way

[Participant 4] 11:22:51
I think how to explain that? I think the size or like

[Participant 4] 11:22:55
It depends on like

[Participant 4] 11:22:58
the operating system it was made for, I guess that also like affects the way you craft even though it's heap exploit, it's very different on different operating systems

[Participant 4] 11:23:05
So if it was

[Participant 4] 11:23:07
um like i say this, if a 32-bit

[Participant 4] 11:23:10
if the binary was a 32-bit executable

[Participant 4] 11:23:12
the way you craft an executable for 32-bit would be very different from a 64-bit. And that could also impede like the way you craft.

[Participant 4] 11:23:20
your exploit. 

[Experimenter 3] 11:23:21
Okay.

[Participant 4] 11:23:22
Not too much, but yeah. 

[Experimenter 3] 11:23:25
So this is at step five, really, like building the exploit 

[Participant 4] 11:23:27
yes 

[Experimenter 3] 11:23:28
okay

[Participant 4] 11:23:29
it wouldn't do too much, but it could just also

[Participant 4] 11:23:32
it could, I guess, change the way you craft it. And it's not exactly the same. It's not apples to apples. 

[Experimenter 3] 11:23:40
Okay. What are some surprises there? Would that be something that would emerge while you're building the exploit that you're suddenly like.

[Participant 4] 11:23:46
oh, this is not effective or? 

[Participant 4] 11:23:49
I think so. I think it's just mainly because like

[Participant 4] 11:23:53
But I think that's something you already would know when you're doing step number one. I know what it's made for.

[Participant 4] 11:23:59
I guess that's not really a surprise.

[Participant 4] 11:24:04
I can't think of any surprises right now. Yeah, I can't think of any. 

[Experimenter 3] 11:24:08
Oh, good. That's good. It means it's a robust process.

[Experimenter 3] 11:24:12
Yeah, are there any, I know step four is so iterative and that's when you get into these sub, sub, sub loops of like, I found this thing, I'm going to Google it. I'm going to get some results. I'm going to try that out. I'm going to, oh, that enables me to find a new thing.

[Experimenter 3] 11:24:27
Do you find things during that step sometimes that just waste your time?

[Participant 4] 11:24:30
Oh, 100%. I think you get like distracted.

[Participant 4] 11:24:33
It's very easy to think it's one thing when it's actually not one thing.

[Participant 4] 11:24:37
So I think you can get really lost

[Participant 4] 11:24:42
Because you think something is vulnerable, but when you actually test it out, it's not vulnerable and you just wasted like 30 minutes crafting an exploit that doesn't work.

[Experimenter 3] 11:24:51
Okay.

[Experimenter 3] 11:24:52
Is that based on identifying some pattern?

[Participant 4] 11:24:55
Yes. You think it's this pattern okay

[Participant 4] 11:24:57
But it's actually you yeah

[Participant 4] 11:25:00
Because you see the pattern, it reminds you of something that you used to do

[Participant 4] 11:25:04
another CTF, but it's actually not that exploit. And then you try exploiting that on the actual CTF and it doesn't work because

[Participant 4] 11:25:10
there's protections in place to mitigate that.

[Experimenter 3] 11:25:13
I see. Okay. Yeah.

[Experimenter 3] 11:25:17
You successfully identify a pattern, but then there's another step which is that

[Experimenter 3] 11:25:21
the pattern is actually right or good as opposed to

[Experimenter 3] 11:25:26
potentially misleading. 

[Participant 4] 11:25:28
Yes.

[Experimenter 3] 11:25:29
Okay. So identifying the pattern

[Experimenter 3] 11:25:32
enables this misleading belief that something is vulnerable sometimes when it's not. 

[Participant 4] 11:25:37
Yes. Definitely. 

[Experimenter 3] 11:25:40
And then also it enables finding

[Experimenter 3] 11:25:43
Or yeah, finding vulnerabilities, finding potential vulnerabilities.

[Participant 4] 11:25:48
Yeah. 

[Experimenter 3] 11:25:49
Okay. Let's see. So is that

[Experimenter 3] 11:25:52
I'm trying to see the misleading belief, does that emerge um

[Experimenter 3] 11:25:57
once you find the pattern or you find the pattern and then you Google, right?

[Experimenter 3] 11:26:03
After you Google, do you feel that this misleading belief is gone or could it reinforce it?

[Participant 4] 11:26:09
Both. Okay, it could be either one. 

[Experimenter 3] 11:26:14
It could be either one. Okay. Okay. So, um.

[Experimenter 3] 11:26:17
this and this both can

[Experimenter 3] 11:26:21
enable this 

[Participant 4] 11:26:22
yes 

[Experimenter 3] 11:26:23
okay but also the Google results can correct your disbelief or not? 

[Participant 4] 11:26:25
Yes, it can also correct it. 

[Experimenter 3] 11:26:27
Would you say more often it does one versus the other?

[Experimenter 3] 11:26:30
Or is it really just hard to say? 

[Participant 4] 11:26:33
To be honest, I think I usually get the wrong idea.

[Experimenter 3] 11:26:35
From Google? 

[Participant 4] 11:26:38
Yeah. I usually just have to actually look at the code itself and just use my own understanding of how like

[Participant 4] 11:26:41
computers work to understand the vulnerability. 

[Experimenter 3] 11:26:44
Okay, I'm going to make this slightly positive then.

[Participant 4] 11:26:47
Yes. 

[Experimenter 3] 11:26:49
0.5.

[Experimenter 3] 11:26:51
And this misleading belief that something is vulnerable

[Experimenter 3] 11:26:55
is a time waster.

[Experimenter 3] 11:26:58
And it negatively affects your successful identification.

[Experimenter 3] 11:27:03
All right. Very negatively, I would imagine. 

[Participant 4] 11:27:07
Yes. Okay.

[Experimenter 3] 11:27:12
what if this happens, what do you have to do next?

[Participant 4] 11:27:14
I would start over. 

[Experimenter 3] 11:27:16
Start over. Okay. 

[Participant 4] 11:27:18
I wouldn't start over, but I would…

[Participant 4] 11:27:19
kind of just like go through the steps of one, two, three again

[Experimenter 3] 11:27:21
all the way back to what is the challenge?

[Participant 4] 11:27:25
Or back to it could be. Okay. Because it depends, I guess. I don't know how sometimes if it's like, I've been looking at this for eight hours and I'm like, okay.

[Participant 4] 11:27:32
I'm approaching this wrong. I'm going to start over because I don't want to keep wasting my time like

[Participant 4] 11:27:37
pushing something. So I'd have a fresh new start

[Participant 4] 11:27:40
And then re-examine things that I haven't looked at or thought of yet.

[Experimenter 3] 11:27:44
Does this bring you back to what is the challenge or how does it work?

[Experimenter 3] 11:27:49
What step do you go back to?

[Experimenter 3] 11:27:51
If I'm going to press you 

[Participant 4] 11:27:55
if I'm really, I'm like, okay, well, this obviously isn't a heap challenge, but I know it's binary. 

[Experimenter 3] 11:27:59
Okay.

[Participant 4] 11:28:00
Yeah, I think probably if you step two then. 

[Experimenter 3] 11:28:04
Okay. Okay, so it doesn't change. You typically, if you thought something was vulnerable and it's not, it doesn't change your understanding of what the challenge is?

[Participant 4] 11:28:13
Sometimes it does, though. 

[Experimenter 3] 11:28:15
Okay. 

[Participant 4] 11:28:16
Sometimes I'm like, wait, maybe this isn't what I think it is. 

[Experimenter 3] 11:28:19
Okay. So this could maybe bring you back to step one or step two. 

[Participant 4] 11:28:25
Yes.

[Experimenter 3] 11:28:26
Okay.

[Experimenter 3] 11:28:30
And would you say that

[Experimenter 3] 11:28:32
you discover, right, this is really discover um

[Experimenter 3] 11:28:38
you've been discovering that you've been misled, that informs what the challenge is in that case. You're like, oh, now I know something new yes okay and then it also

[Experimenter 3] 11:28:48
Does that inform how it works, your understanding of how it works too? 

[Participant 4] 11:28:52
A little bit more, yeah. 

[Experimenter 3] 11:28:55
Cool. Cool. Got it. It.

[Experimenter 3] 11:28:56
But yeah, it does not. It makes worse your identification of vulnerabilities at the time. Okay.

[Experimenter 3] 11:29:04
Almost the end here. So building the exploit, successfully building the exploit. So the craftsmanship, right? The work of crafting that script

[Experimenter 3] 11:29:14
Are there sometimes some surprises that emerge here or issues that emerge that

[Experimenter 3] 11:29:19
stop you, make you waste time.

[Participant 4] 11:29:22
I think…

[Participant 4] 11:29:24
I think it's just kind of like, oh, I've been looking at this wrong um i

[Participant 4] 11:29:28
I've been looking at this wrong. I'm using the wrong exploit. I thought it was this, but it's not actually that. And I just crafted a whole like 50 line script that doesn't even work.

[Participant 4] 11:29:38
Another thing is like you think mathematical operation works this way

[Participant 4] 11:29:43
But your math is wrong.

[Participant 4] 11:29:46
Or, you know.

[Participant 4] 11:29:47
They made it in a certain way where you have to use

[Participant 4] 11:29:50
something else.

[Experimenter 3] 11:29:53
what uh what what

[Experimenter 3] 11:29:54
How do you discover if you've been using the wrong exploit?

[Participant 4] 11:29:57
It doesn't work. The registers aren't being overwritten.

[Participant 4] 11:30:02
you're not overriding the desired areas of memory

[Participant 4] 11:30:06
as you want it to. And it's just not working anymore. 

[Experimenter 3] 11:30:09
So if you're using the wrong exploit, the script doesn't interact with the program effectively or it does, but just nothing happens. 

[Participant 4] 11:30:15
Nothing happens. 

[Participant 4] 11:30:19
Okay. So then you craft the script successfully, but then nothing happens. 

[Participant 4] 11:30:22
Yes.

[Participant 4] 11:30:23
So you have to kind of re-approach it again. 

[Experimenter 3] 11:30:26
Got it. So it's a blocker that in that.

[Experimenter 3] 11:30:28
that part of the process right there. 

[Participant 4] 11:30:30
Yes.

[Participant 4] 11:30:31
Okay.

[Experimenter 3] 11:30:34
If your math is wrong?

[Experimenter 3] 11:30:36
Where's that in the process? You craft the script and it's just another part right here basically between

[Experimenter 3] 11:30:43
crafting and actually

[Participant 4] 11:30:45
Yes. 

[Experimenter 3] 11:30:47
Successfully building the exploit or having the exploit run. 

[Experimenter 3] 11:30:53
Okay. What might cause your math to be wrong? Is there something back here that would lead you to this result?

[Participant 4] 11:31:01
I think…

[Participant 4] 11:31:02
Man, I think reading the code wrong, misinterpreting the code.

[Participant 4] 11:31:08
I think also is it 

[Experimenter 3] 11:31:10
sorry go ahead. 

[Participant 4] 11:31:12
Is it the misleading

[Experimenter 3] 11:31:13
Okay, okay.

[Experimenter 3] 11:31:17
misleading belief that something is vulnerable? 

[Participant 4] 11:31:21
Yes. 

[Experimenter 3] 11:31:22
That'll affect your math or that'll affect the use of the wrong exploit.

[Participant 4] 11:31:24
I think both or actually just use of the wrong exploit 

[Experimenter 3] 11:31:26
okay

[Participant 4] 11:31:27
Math-wise, I think it could also just be a little confusing

[Participant 4] 11:31:31
maybe you don't fully understand like how an operator works and

[Participant 4] 11:31:37
you craft the wrong exploit and it doesn't work. So you have to kind of go back and understand

[Participant 4] 11:31:43
how the operator is used i think

[Participant 4] 11:31:47
it can just kind of sometimes be tricky when looking at encryption algorithms

[Participant 4] 11:31:52
And because like they're so it requires like a deep understanding of math sometimes

[Participant 4] 11:31:56
It can throw you off and you could be off

[Participant 4] 11:32:00
I guess that's just like something that

[Participant 4] 11:32:02
is up to the person. If you understood it, you probably wouldn't have a hard time writing the wrong math.

[Experimenter 3] 11:32:08
So using the wrong exploit would lead you to discover that you had a misleading belief. Is that right? 

[Participant 4] 11:32:13
I think yes. 

[Experimenter 3] 11:32:15
Okay. Got it, got it.

[Experimenter 3] 11:32:19
And what would that be based on?

[Experimenter 3] 11:32:21
this misleading belief, what would cause your misleading belief in the first place? 

[Participant 4] 11:32:26
I think just because you see you know you can overwrite something. It doesn't actually lead to this one thing. 

[Experimenter 3] 11:32:29
Got it. 

[Participant 4] 11:32:30
Just because it does one thing doesn't mean it actually

[Participant 4] 11:32:32
can do it in this one.

[Experimenter 3] 11:32:35
Okay, so the underlying reality there is that you've identified the pattern, but the pattern

[Experimenter 3] 11:32:41
isn't what you think it is. 

[Participant 4] 11:32:43
Yes, 100%.

[Participant 4] 11:32:45
And that's why you have to always read the source code and really understand how it works.

[Experimenter 3] 11:32:50
All right, so really

[Experimenter 3] 11:32:52
what happens here is that you identify a pattern successfully

[Experimenter 3] 11:32:57
But the pattern ain't what you think it is.

[Experimenter 3] 11:33:02
And that happens when you don't

[Experimenter 3] 11:33:04
read the source code successfully. 

[Participant 4] 11:33:07
Yes. 

[Experimenter 3] 11:33:09
Okay. 

[Participant 4] 11:33:10
You jumped to conclusions

[Experimenter 3] 11:33:13
That's interesting. Jumping to conclusions.

[Participant 4] 11:33:19
I think a lot of the time when you're playing CTFs, you're also trying to solve as much as you can so 

[Experimenter 3] 11:33:24
sure

[Participant 4] 11:33:26
That could happen, definitely.

[Experimenter 3] 11:33:32
jumping to conclusions, would that also be part of the reason why your math is wrong? 

[Participant 4] 11:33:34
Yes, definitely. 

[Experimenter 3] 11:33:36
Okay. What might lead you to jump to conclusions?

[Participant 4] 11:33:40
Oh, I've seen this before. Oh, it's definitely this. 

[Experimenter 3] 11:33:43
Past experience. 

[Participant 4] 11:33:44
Past experience, definitely. 

[Experimenter 3] 11:33:45
Mm-hmm.

[Participant 4] 11:33:46
I think that's mainly it. That's the only reason why I would jump to a conclusion also

[Participant 4] 11:33:50
not having a full understanding of how a function works and just assuming it works like that.

[Participant 4] 11:33:55
When you actually look at how it's written, it's like, oh, I was wrong. I think assumptions, but I don't think we

[Participant 4] 11:34:01
Have that there. 

[Experimenter 3] 11:34:05
Mm-hmm. So, um.

[Experimenter 3] 11:34:07
Basically, if you don't fully understand how to interact with the code or how it works, if you're making some assumptions.

[Participant 4] 11:34:15
Yes. 

[Experimenter 3] 11:34:18
Okay. Okay. Do you often need to make assumptions in that process?

[Participant 4] 11:34:22
Sometimes I try not to make as many assumptions

[Participant 4] 11:34:25
Because it actually leads me down the wrong path like a good amount of the time.

[Participant 4] 11:34:30
So I try not to make assumptions. 

[Experimenter 3] 11:34:33
Okay, so it's really, when would you basically if you just want to get on with it and

[Experimenter 3] 11:34:37
to see if something works or? 

[Participant 4] 11:34:40
Yes. I just want to see like, is this even vulnerable? Like, I'm just going to make an assumption

[Participant 4] 11:34:43
this line of code is vulnerable.

[Participant 4] 11:34:46
And then sometimes I'm wrong. And then you have to start all over again and thoroughly read the code. 

[Experimenter 3] 11:34:50
And sometimes assumptions are right, sometimes they're not. 

[Participant 4] 11:34:53
Yeah. Definitely.

[Experimenter 3] 11:34:55
Okay. put it like slightly negative. 

[Participant 4] 11:34:58
Okay.

[Experimenter 3] 11:35:00
to see whether and if something works.

[Experimenter 3] 11:35:05
And that negatively affects your successful understanding of

[Experimenter 3] 11:35:08
Well, actually, it potentially enables you to understand how to interact with the code, right? 

[Participant 4] 11:35:14
Definitely. 

[Experimenter 3] 11:35:16
Okay, so it could be good. positively enable that. Yes. But it could also lead you to

[Participant 4] 11:35:21
uh…

[Experimenter 3] 11:35:22
develop or operate with a misunderstanding. 

[Participant 4] 11:35:25
100%. 

[Experimenter 3] 11:35:28
Okay.

[Experimenter 3] 11:35:30
So this doesn't, it's not a negative here per se.

[Experimenter 3] 11:35:34
it's this relationship is…

[Experimenter 3] 11:35:35
is maybe neutral. Could be either.

[Experimenter 3] 11:35:41
But if you make progress.

[Experimenter 3] 11:35:44
then you might double down on that assumption.

[Participant 4] 11:35:46
Yes. 

[Experimenter 3] 11:35:57
Okay. Gotcha. and progress in this, what would that look like to you? 

[Participant 4] 11:36:04
Progress, I think, is being able to. So I guess when I make an assumption, progress is, yeah, I found a vulnerability. Okay, great. I am actually able to like do bad things with the program. 

[Experimenter 3] 11:36:10
Okay.

[Participant 4] 11:36:12
unexpected behavior. 

[Experimenter 3] 11:36:15
Okay. So you, yeah, if you…

[Experimenter 3] 11:36:17
basically.

[Experimenter 3] 11:36:19
the perception of progress, let's say.

[Experimenter 3] 11:36:34
Okay. And if you perceive progress, then you might

[Experimenter 3] 11:36:39
double down on assumptions you've made.

[Experimenter 3] 11:36:42
Okay. 

[Participant 4] 11:36:45
Which could be bad also. 

[Experimenter 3] 11:36:48
Mm-hmm. Got it. Yep.

[Experimenter 3] 11:37:02
All right. I think we're just about there. Are there anything

[Experimenter 3] 11:37:08
Just to tie the knot on doubling down on assumptions.

[Experimenter 3] 11:37:13
I guess the idea is that this

[Experimenter 3] 11:37:17
the risk here is that this

[Experimenter 3] 11:37:21
leads to, you know, potentially a discovering that you actually had a misleading belief. Is that right? 

[Participant 4] 11:37:25
Yep.

[Experimenter 3] 11:37:27
Okay.

[Experimenter 3] 11:37:30
And the cause of that is because the pattern ain't what you think it is.

[Experimenter 3] 11:37:35
Okay.

[Experimenter 3] 11:37:39
And it does not connect.

[Experimenter 3] 11:37:44
It's too complex of a system.

[Experimenter 3] 11:37:49
Does doubling down on assumptions, if you're doing like you make an assumption for the sake of progress, you get some feedback that sounds right.

[Experimenter 3] 11:37:58
Would that make you more likely to jump to conclusions or would it just be that you might or might not jump to conclusions either way?

[Experimenter 3] 11:38:05
assumptions that you made earlier are irrelevant. 

[Participant 4] 11:38:09
I think it usually like, I think it always like, it's always good to find something that corresponds. I think, yes, it would. I'd actually follow it, but…

[Participant 4] 11:38:15
The only time I gave up on the assumption is when it fails.

[Experimenter 3] 11:38:23
Okay, so doubling down

[Experimenter 3] 11:38:25
would make you more likely to jump to a conclusion.

[Participant 4] 11:38:28
So I'm usually, yeah. I try not to but definitely.

[Experimenter 3] 11:38:32
Okay.

[Experimenter 3] 11:38:35
Last question, what are some ways that you try not to double down on assumptions? 

[Participant 4] 11:38:39
I think when I find any vulnerability, I try not to think that it's actually vulnerability until

[Participant 4] 11:38:42
I'm able to actually test it out.

[Participant 4] 11:38:47
I try to have a very open mind

[Participant 4] 11:38:50
And try not to jump to any conclusions at all. And I like to just slowly examine the code and understand what's happening.

[Experimenter 3] 11:38:59
Mm-hmm.

[Experimenter 3] 11:39:05
So approaching a discovered vulnerability or a possible vulnerability with skepticism. 

[Participant 4] 11:39:11
Yes. Definitely. 

[Experimenter 3] 11:39:14
Okay. Cool. All right.

[Experimenter 3] 11:39:19
This is a very interesting map. 

[Participant 4] 11:39:22
Yeah. 

[Experimenter 3] 11:39:23
Yeah. Well, thank you very much. This wraps up day one. 

[Participant 4] 11:39:26
Awesome.

[Experimenter 3] 11:39:28
And yeah, I believe we have day two scheduled already. The plan for day two is on the consent form that you can take.

[Experimenter 3] 11:39:38
And yeah, we have that scheduled.

[Experimenter 3] 11:39:40
Thank you again for participating.

[Experimenter 3] 11:39:43
Last note is

[Experimenter 3] 11:39:45
Looking at this, is there anything on here

[Experimenter 3] 11:39:48
that you want to correct or any other notes that you might want to add to this kind of process and

[Experimenter 3] 11:39:54
what you feel enables success or failure.

[Participant 4] 11:39:58
Not that I, no.

[Participant 4] 11:39:59
Not that I can think of. 

