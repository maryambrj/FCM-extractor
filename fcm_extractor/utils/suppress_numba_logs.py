"""
Utility to suppress Numba JIT compilation logs that pollute the console and log files.
These logs are generated by numerical libraries like UMAP, scikit-learn, etc.
"""

import os
import warnings
import logging


def suppress_numba_logs():
    """Suppress Numba JIT compilation verbose logs."""
    
    # Set environment variables to disable Numba debug output
    os.environ['NUMBA_DISABLE_JIT'] = '0'  # Keep JIT enabled for performance
    os.environ['NUMBA_VERBOSE'] = '0'      # Disable verbose output
    os.environ['NUMBA_DEBUG_TYPEINFER'] = '0'
    os.environ['NUMBA_DEBUG'] = '0'
    os.environ['NUMBA_DEBUG_FRONTEND'] = '0'
    os.environ['NUMBA_DISABLE_PERFORMANCE_WARNINGS'] = '1'
    
    # Suppress Numba warnings and debug messages
    warnings.filterwarnings("ignore", category=UserWarning, module="numba")
    warnings.filterwarnings("ignore", message=".*numba.*")
    
    # Disable Numba logging at the logger level
    try:
        import numba
        # Set Numba loggers to WARNING level or higher to suppress debug/info messages
        numba_loggers = [
            'numba',
            'numba.core',
            'numba.core.compiler',
            'numba.core.compiler_lock',
            'numba.core.byteflow',
            'numba.core.ssa',
            'numba.core.interpreter',
            'numba.core.controlflow',
            'numba.core.dataflow',
            'numba.core.transforms',
            'numba.core.analysis',
            'numba.core.ir_utils',
            'numba.core.lowering',
            'numba.core.cpu_target',
            'numba.parfors',
            'numba.core.types.functions'
        ]
        
        for logger_name in numba_loggers:
            logger = logging.getLogger(logger_name)
            logger.setLevel(logging.WARNING)
            logger.propagate = False
            
    except ImportError:
        # Numba not installed, nothing to suppress
        pass
    
    # Also suppress related numerical computation warnings
    try:
        import numpy as np
        np.seterr(all='ignore')
    except ImportError:
        pass


def suppress_sklearn_warnings():
    """Suppress common sklearn warnings that clutter logs."""
    warnings.filterwarnings("ignore", category=UserWarning, module="sklearn")
    warnings.filterwarnings("ignore", message=".*sklearn.*")
    warnings.filterwarnings("ignore", message=".*convergence.*")
    warnings.filterwarnings("ignore", message=".*n_components.*")


def suppress_umap_logs():
    """Suppress UMAP verbose output."""
    try:
        import umap
        # UMAP uses numba internally, so the numba suppression should help
        # Also suppress UMAP-specific warnings
        warnings.filterwarnings("ignore", category=UserWarning, module="umap")
        warnings.filterwarnings("ignore", message=".*umap.*")
    except ImportError:
        pass


def setup_clean_logging():
    """Set up clean logging by suppressing noisy numerical library logs."""
    
    # Suppress Numba logs (main culprit)
    suppress_numba_logs()
    
    # Suppress other common noisy libraries
    suppress_sklearn_warnings()
    suppress_umap_logs()
    
    # Set matplotlib to non-interactive backend to avoid GUI warnings
    try:
        import matplotlib
        matplotlib.use('Agg', force=True)  # Non-interactive backend
        import matplotlib.pyplot as plt
        plt.ioff()  # Turn off interactive mode
    except ImportError:
        pass
    
    print("âœ“ Numerical computation logging has been configured for clean output")


if __name__ == "__main__":
    setup_clean_logging()
    print("Numba and numerical library logging has been suppressed.")